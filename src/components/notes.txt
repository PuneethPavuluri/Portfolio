npm i @emailjs/browser 

the name in input feild and email template should match

look and change service_id, template_id, public_key

npm install react-dotenv
use .env file to store service_id, template_id, public_key but we need to use VITE_XXXX as we are using vite react for react app we use REACT_APP_XXXX import.meta.env.VITE_SERVICE_ID to use it

import React, { useRef } from "react";
import emailjs from "@emailjs/browser";
import { useForm } from "react-hook-form";

const Contact = () => {
    const form = useRef();

    const {
        register,
        handleSubmit,
        formState: { errors },
    } = useForm({
        // mode: "onChange",
        mode: "onBlur",
    });

    const handleEmail = (data) => console.log(data);

    const handleError = (errors) => console.error(errors);

    const validations = {
        name: {
        required: "name required.",
        minLength: {
            value: 2,
            message: "name should be at-least 2 characters.",
        },
        },
        email: {
        required: "Email is required.",
        pattern: {
            value: /^[^@ ]+@[^@ ]+\.[^@ .]{2,}$/,
            message: "Email is not valid.",
        },
        },
        message: {
        required: "message required.",
        minLength: {
            value: 5,
            message: "message must be at least 5 characters long.",
        },
        },
    };

    const sendEmail = (e) => {
        e.preventDefault();
        // if (name && emailAddress && emailMessage) {

        emailjs
        .sendForm(
            import.meta.env.VITE_SERVICE_ID,
            import.meta.env.VITE_TEMPLATE_ID,
            form.current,
            import.meta.env.VITE_PUBLIC_KEY
        )
        .then(
            (result) => {
            console.log(result.text);
            },
            (error) => {
            console.log(error.text);
            }
        );
    };

  return (
    <form
        ref={form}
        onSubmit={handleSubmit(handleEmail, handleError)}
        id="contact-form-container"
    >
        <div className="field is-horizontal">
        <div className="field-label is-normal">
            <label className="label">From</label>
        </div>
        <div className="field-body">
            <div className="field">
            <p className="control is-expanded has-icons-left">
                <input
                name="name"
                className="input "
                type="text"
                placeholder="Your Name"
                {...register("name", validations.name)}
                />
                <span className="help is-danger">
                {errors?.name && errors.name.message}
                </span>
                <span className="icon is-small is-left">
                {/* <FontAwesomeIcon icon={faUser} /> */}
                </span>
            </p>
            </div>
            <div className="field">
            <p className="control is-expanded has-icons-left has-icons-right">
                <input
                name="email"
                className="input "
                type="email"
                placeholder="Email"
                {...register("email", validations.email)}
                />
                <span className="help is-danger">
                {errors?.email && errors.email.message}
                </span>
                <span className="icon is-small is-left">
                {/* <FontAwesomeIcon icon={faEnvelope} /> */}
                </span>
                <span className="icon is-small is-right">
                {/* <FontAwesomeIcon icon={faCheck} /> */}
                </span>
            </p>
            </div>
        </div>
        </div>

        <div className="field is-horizontal">
        <div className="field-label is-normal">
            <label className="label">Message</label>
        </div>
        <div className="field-body">
            <div className="field">
            <div className="control">
                <textarea
                name="message"
                className="textarea"
                placeholder="Enter message..."
                {...register("message", validations.message)}
                ></textarea>
                <span className="help is-danger">
                {errors?.message && errors.message.message}
                </span>
            </div>
            </div>
        </div>
        </div>

        <div className="field is-horizontal">
        <div className="field-label">
            <br />
        </div>
        <div className="field-body">
            <div className="field">
            <div className="control">
                <button
                onClick={sendEmail}
                id="message-button"
                className="button "
                type="submit"
                >
                Send message
                </button>
            </div>
            </div>
        </div>
        </div>
    </form>
  )
}

export default Contact


